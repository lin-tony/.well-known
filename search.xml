<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python good use]]></title>
    <url>%2Fhexo_blog%2F2018%2F10%2F09%2FPython%20good%20use%2F</url>
    <content type="text"><![CDATA[Nice Code12345678910111213141516171819202122232425262728293031str.capitalize() 返回str的首字母大写，其他全小写str.title() 将str的所有单词首字母大写，其他全小写str.count(sub, start= 0,end=len(string)) 字符串匹配，返回str中sub的个数str.endswith(suffix[, start[, end]]) suffix是匹配的字符串，如以该字符串结尾，返回Tcalendar.month(2016, 1) 返回该月日历（import calendardatetime.date.isocalendar() 返回格式如(year，month，day)的元组,(2017, 15, 6) 其中date=date(2018,6,1) https://blog.csdn.net/alvin930403/article/details/54089087join() list = [1, 2, 3, 4, 5] ','.join(list) ==1,2,3,4,5math.factorial(num) 返回num的阶乘reversed(seq) seq -- 要转换的序列，可以是 tuple, string, list 或 range。返回一个反转的迭代器enumerate() 将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标---[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]isupper() 方法检测字符串中所有的字母是否都为大写。strip([chars]) 移除字符串头尾指定的字符（默认为空格）str.encode(encoding='UTF-8',errors='strict') errors：设置不同错误的处理方案 默认为 'strict'pickle.dumps() 把任意对象序列化成一个bytes .load()反序列化json.dumps(d) 返回一个str，内容是标准的JSON .load()反序列化time.strftime(format[, t])以时间元组，并返回以可读字符串表示的当地时间，格式由参数format决定。t是一个struct_time对象。 Tips：1234567891011121314151617#!/usr/bin/env python3 指定执行该脚本的解释器# -*- coding: utf-8 -*- 按照UTF-8编码读取源代码// 称为地板除，两个整数的除法仍然是整数函数参数 *args是可变参数，args接收的是一个tuple/list； **kw是关键字参数，kw接收的是一个dict。 functools.partial(int, base=2) 偏函数 &gt;&gt;&gt;int2 = functools.partial(int, base=2) &gt;&gt;&gt;int2('10010') 相当于 &gt;&gt;&gt;kw = &#123; 'base': 2 &#125; &gt;&gt;&gt;int('10010', **kw) iter123456789101112131415161718192021222324252627282930313233item = [1,2,3]for i in itertools.permutations(item): #考虑顺序，输出组合 print(i)(1, 2, 3)(1, 3, 2)(2, 1, 3)(2, 3, 1)(3, 1, 2)(3, 2, 1)for i in itertools.combinations(item,2): #无序，不放回 print(i)(1, 2)(1, 3)(2, 3)for i in itertools.combinations_with_replacement(item,2): #无序 放回 print(i)(1, 1)(1, 2)(1, 3)(2, 2)(2, 3)(3, 3)ab = [1,2]cd = [3,4]for i in itertools.product(ab, cd): #笛卡儿积 print(i)(1, 3)(1, 4)(2, 3)(2, 4)]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python Quant]]></title>
    <url>%2Fhexo_blog%2F2018%2F10%2F09%2FPython%20Quant%2F</url>
    <content type="text"><![CDATA[Numpyreshape重塑12345678910111213import numpy as npb = np.arange(27).reshape(3, 3, 3)[[[ 0 1 2] [ 3 4 5] [ 6 7 8]] [[ 9 10 11] [12 13 14] [15 16 17]] [[18 19 20] [21 22 23] [24 25 26]]] reshape(行，列，z) 等于-1的话，那么Numpy会根据剩下的维度计算出数组的另外一个shape属性值a.shape 数组的维度 x,ya.ndim 数组轴的个数a.dtype 数组中元素类型的对象 arraya.dtype 数组中元素类型的对象d = np.array([1,2,3,4,5], dtype=’float64’)转换类型np.zeros((3,3,3))创建数值为0的数组（此处是矩阵）np.ones((3,3,3))创建数值为1的数组a.unique() #返回数据里唯一的值的arraya.value_counts() #统计各值出现的频率 arangenp.arange(5) #数列np.arange(5,20, step = 2)[ 5 7 9 11 13 15 17 19] linspacenumpy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None) #等差数列num : int, optional #生成的样本数，默认是50。必须是非负endpoint : bool, optional #如果是真，则一定包括stop，如果为False，一定不会有stopretstep : bool, optional #If True, return (samples, step), where step is the spacing between samples.np.logspace(..,base=2) #等比，比值为2 other索引，切片和迭代12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061x.astype(np.float64) #强制类型转换np.sum(x1, axis=0) #求和，axis如1则列相加np.cumsum(x1) #累加np.log(g) #对数np.exp(g) #指数np.sqrt(g) #开方np.square(x) #平方np.maximum(x1, x2) #返回大的元素arraynp.where(x1&gt;x2,a,b) #a和b可以是x1或者任何数，第一个参数如if。返回判断为true的元素的序列np.round(x) #保留两位小数a[[0 1 2][3 4 5][6 7 8]]a[:, 1][1 4 7]a[1, :][3 4 5]a[a&gt;3][4 5 6 7 8]a.ravel() 将多维数组降位一维[0 1 2 3 4 5 6 7 8]a1 = np.array([9,10,11])a2 = np.vstack((a,a1))[[ 0 1 2] [ 3 4 5] [ 6 7 8] [ 9 10 11]]a2.reshape(2,6)# 不改变原有数组a2.resize(2,6) # 改变原有数组（多了补0，少了删去）[[ 0 1 2 3 4 5] [ 6 7 8 9 10 11]]a2.transpose() #转置[[ 0 6] [ 1 7] [ 2 8] [ 3 9] [ 4 10] [ 5 11]]np.hsplit(a2,3) # 垂直切分,分割成3列[array([[0, 1], [6, 7]]), array([[2, 3], [8, 9]]), array([[ 4, 5], [10, 11]])]np.eye(5) # 生成对角矩阵(单位矩阵[[ 1. 0. 0. 0. 0.] [ 0. 1. 0. 0. 0.] [ 0. 0. 1. 0. 0.] [ 0. 0. 0. 1. 0.] [ 0. 0. 0. 0. 1.]] .12345678910111213141516171819202122232425b[[[ 0 1 2] [ 3 4 5] [ 6 7 8]] [[ 9 10 11] [12 13 14] [15 16 17]] [[18 19 20] [21 22 23] [24 25 26]]] for element in b.flat: #flat数组元素迭代器 print(element)0123...2223242526 矩阵计算12345678910111213141516A = np.array([[1, 2],[4, 5],[7, 8]])B = np.array([[4, 4, 2],[2, 3, 1],])print(np.dot(A, B))#相乘[[ 8 10 4] [26 31 13] [44 52 22]]A_=np.linalg.inv(A) #A的逆矩阵 PandasAPI: http://pandas.pydata.org/pandas-docs/stable/whatsnew.html ###SeriesSeries是pandas系列里的一维数组，它可以包含任何数据类型的标签。 123456pandas.Series(data=None, index=None, dtype=None, name=None, copy=False, fastpath=False)obj.name 自定义名称obj.values 数组表示形式obj.index 索引对象obj2 = Series([4,7,-5,3], index=['d','b','a','c']) 带有标记索引 read_excel返回一个DataFrame1234pd.read_excel(io, sheetname=0,header=0,skiprows=None,index_col=None,names=None, arse_cols=None,date_parser=None,na_values=None,thousands=None, convert_float=True,has_index_names=None,converters=None,dtype=None, true_values=None,false_values=None,engine=None,squeeze=False,**kwds) io ：excel 路径；sheetname=[0,n]，若sheetname=None是返回全表 。注意：int/string返回的是dataframe，而none和list返回的是dict of dataframe;header ：指定作为列名的行，默认0，即取第一行，数据为列名行以下的数据；若数据不含列名，则设定 header = None；skiprows：省略指定行数的数据skip_footer：省略从尾部数的行数据.index_col ：指定列为索引列，也可以使用 u’string’.names：指定列名，传入一个list数据 123456789101112131415161718192021222324252627import pandas as pddata = pd.read_excel('sz50.xlsx', sheetname=0, index_col='datetime')print (data.index)s = data.close #名为close的列print(s.head(10))#输出前10条，不带参数输出5， .tail()同理monthly_prices = s.resample('M').last() #给每个月的最后一天抽样 resample('M') 按时间序列遍历#resample见 https://blog.csdn.net/wangshuang1631/article/details/52314944/s.resample('M').median() #返回本月index均值df.resample('21D', how='mean') #21天均值def custom_resampler(array_like): return array_like[0] #返回本组的第一个值（月初的值）first_of_month_prices = s.resample('M').apply(custom_resampler) #apply对每一个传入的数据调用自定义函数custom_resamplerdata_s= Series.loc[datetime(2017,1,1):datetime(2017,1,10)]data_r=data_s.resample('D').mean() #resample在日期之间空缺的地方插入天数，index自动补NaNdata_r.head(10).fillna(method='ffill',a) #填写缺失的数据 ffill表示用前一个值填，bfill用后一个填,None用指定值。 a是一个字典&#123;0:10, 1:20, 3:200&#125;,表示第一列空值填充10...data_r.head(10).dropna(axis=0) #直接删除缺失数据的行（列）data_r.head(10).dropna(how='all') #只有整行数据为空才删除pd.merge(df1, df2, on='name', how='inner') #内连接合并，根据name列，还有左连接右连接，外连接df.join(df2) #合并dfpd.concat(df1, df2, axis=0) #轴向连接，将多个对象沿轴堆叠到一起df.combine_first(df2) #合并，忽略重复数据，都有的话保留df的内容 DataFrame1pandas.DataFrame( data, index, columns, dtype, copy) #data: 数据格式（ndarray，series，map等）， index: 行标签， columns: 列标签 other (pandas.)12345678910111213141516171819202122232425262728293031323334353637383940414243444546df.sort_index(axis=0) #排序df.sort_index(by='xx', ascending=False)#对xx列排序， 降序,True升序DataFrame.drop('x',axis=0) #删除索引为x的行（1则是列）DataFrame.mean(n=0) #把n轴向数据求平均，得到轴数据的平均值。默认求x轴DataFrame.std() #求标准差df.cov() #协方差df.corr() #线性相关程度(相关系数) 参数有&#123;'pearson', 'kendall', 'spearman'&#125;,默认pearsonDataFrame.describe #生成描述性统计数据，包括:count,mean,std,min,25%,50%,75%,maxDataFrame.diff(periods=1, axis=0) #periods：移动的幅度，int类型，默认值为1，指相对于前一行；负数指后x行。 axis：移动的轴，0是x，1是y。&#123;0 or ‘index’, 1 or ‘columns’&#125;DataFrame.pct_change(n=1) #计算增长率,相对前n个的增长率，如n=2则(n2-n1)/n1DataFrame.rolling(window=30).mean() #前30个数据的均值（30天均线）pd.date_range('20160101',periods=5) #返回日期seriespd.concat([s_1, s_2], axis=0) #连接两个表. axis=0添加行, =1则增加列df.rename(columns=&#123;'close':'xx'&#125;, inplace = True) #更改close列名为xxdf.iloc[0], 根据index来索引df.iloc[0:5:2,‘x’]， 索引为'x'。从0到5，间隔2的行数据。df.loc['a', 3]是-5，根据索引来索引，第三列数据df.loc['20160102':'20160104']， 范围索引df.loc[df['x'] &gt; 6] #布尔索引如果只传入一个字典，则结果Series/df中的索引就是原字典的键df[df.isnull().values==True] #输出缺失的列df.rank(axis=0, ascending=True) #排序,ascending为True升序DataFrame.stack(level=-1, dropna=True) #将指定级别从列堆叠到索引。也就是将数据的列“旋转”为行。df.unstack() #合并(重组)两个数据帧。将数据的行“旋转”为列。df.pivot('a','b') #将堆叠的df的列a,b重组成a（表头），b(表内容)DataFrame.aggregate（func，axis = 0，* args，** kwargs ） #聚合,同.agg() func:可以是[sum,min,max,mean,std]等numpy里的函数df.agg(&#123;'stock1' : np.sum, 'stock2' : np.std, 'stock3' : np.mean&#125;) #针对不同列用不同算法df.agg([np.sum, np.mean, np.std]) #对同一列进行多个不同的计算df.agg(&#123;'high':'max','low':'min','close':'last', 'open':'first'&#125;) # 对同一列用不同方法形成自定义命名的列df.expanding() #同rollingDataFrame.ewm（com = None，span = None，halflife = None，alpha = None，min_periods = 0，adjust = True，ignore_na = False，axis = 0 ） #指数加权函数 http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.ewm.htmldf['x'].value_count() #对x列的数据进行分组计数df.idxmax() #返回列中最大值索引df.isin(['e']) #返回包含e的列df.info() #查看数据有无缺失以及子数据类型df.describe() #展示每组数据的统计信息pd.qcut(df,10) #将数据分成10份pd.cnt(df,list) #list是一个列表，将按照list的间隔分成len(list)-1份，通常配合pd.get_dummies()使用，生成哑变量矩阵pd.crosstab(a,b) #构建交叉表，a是行信息，b列信息，都是Series。 常与df.div()配合使用，求出a与b的相对比例，每组和为1.df.pivot_table() #透视表 ....更加底层groupby() Panel123456789101112131415161718pandas.Panel(data, items, major_axis, minor_axis, dtype, copy) # data 数据采取各种形式，如：ndarray，series，map，lists，dict，constant和另一个数据帧(DataFrame)# items - axis 0，每个项目对应于内部包含的数据帧(DataFrame)。# major_axis - axis 1，它是每个数据帧(DataFrame)的索引(行)。# minor_axis - axis 2，它是每个数据帧(DataFrame)的列。pn.to_frame() #转换成framePN.rename(items&#123;'xx':'yy','xxG':'xxx'&#125;)Panel.transpose(*args) #置换尺寸 args ： 三个位置参数：每一个代指&#123;0,1,2，'items'，'major_axis'，'minor_axis'访问数据pn['close']pn.major_xs('2017-04-10')pn.minor_xs('2017-04-10')Panel.ix[0:3,-1,''xx] #xx的dataframe的0-2列最后一行 Talib12345tb = talib.abstract #先实例化tb.MA(value,x) # x日均线# 例子ta.abstract.MA(value, 5) for name, value in PN.iteritems()ta.abstract.MACD(value) #MACD线，参数类型Seriestalib.ATR() #平均真实波动范围 Datetime12345678910111213141516171819datetime(2017, 1, 2, 3, 4, 5, 6) #2017-01-02 03:04:05.000006datetime.now() #当前时间datetime.utcnow() #当前UTC时间datetime.fromtimestamp(1000000000) #2001-09-09 09:46:40datetime.now().strftime(format="%Y-%m-%d %H:%M:%S.%f") # 通过给定的format将date_string转换成datetime 2018-09-16 17:32:07.261732#格式：https://docs.python.org/2/library/datetime.html#strftime-strptime-behaviordatetime进行运算，返回timedeltadelta=timedelta(days=1, seconds=-2,microseconds=-3, minutes=-4, hours=-5, weeks=6)delta.days, delta.seconds, delta.microseconds #42 68157 999997now = datetime.now()td = timedelta(1)print (now)print (td)print (now + td * 2)2017-11-21 20:58:50.7638781 day, 0:00:002017-11-23 20:58:50.763878 Matplotlibpyplot1234567891011121314151617181920212223242526plt.plot(x,y,format_string,**kwargs, kind='line') #绘制线图 #xy可传入一个dataframe代替，format_string设置线的类型颜色。kind=&#123;bar:纵向柱状图, barh:横线柱状图, kdf:概率密度曲线, pie:饼图&#125;plt.hist(df, bins=20) #绘制直方图 bin指定柱的个数plt.scatter(stock1.close, stock2.close, c = ['c','r'], s = 20) #散点图 c设置颜色， s设置点大小plt.title("Stock Prices")plt.ylabel("Price")plt.xlabel("Date")plt.show() plt.hlines(0, xmin,xmax, linestyles='dashed') #绘制一条水平参考线, 0代表y=0plt.axvline() #竖直参考线plt.figure(figsize = None) #figsize:(15,7) 生成15*7英寸的图像plt.legend(['x2','x1']) #合并x1和x2 df在同一个图上plt.fill_bewteen(x, y1, y2, alpha=0.5, color="r") #在y1-y2的竖线之间填充透明度为50%的红色subplot绘制子图plt.subplot(2,1,1) #分成2x1，选中第一个，即第一行第一列的子图 此时plt.plot(stock1.close)加进数据plt.subplot(2,1,2) #分成2x1，占用第二个，即第一行第一列的子图plt.grid(True) # 显示背景的网格线，还有样式可选pyplot.axis(v) #v = [xmin, xmax, ymin, ymax] 画布大小a1.plot()a2 = a1.twinx() #生成a1画布的反向y轴（右侧y轴）a2.plot() 题外12345678910111213141516pd.rolling_std() * np.sqrt(array)#股票收益波动import statsmodels.api as sm #statsmodels实现线性拟合 OLSfrom statsmodels import regressiony x = np.arange(0,8)x = sm.add_constant(x) #在x左边加上 值全为1的列model = regression.linear_model.LOS(y, x).fit() #regression.linear_model只是调用其里面的函数LOS。y和x都是array。fit()拟合b = model.params[0]k = model.params[1]y_fit = k*x+b #线性函数np.polynomial.Chebyshev.fit(x,y,p) #多项式拟合。x，y是array，p拟合次数scipy.optimize.brute() #穷举给定集合找到全局最小点scipy.optimize.fminbound() #求给定范围内的最小值scipy.optimize.fmin_bfgs() #求给定值的局部最小值 参考：http://www.fxdayu.com/static/standalone/tutorials.html?article=241]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Django+Bootstrap+Mysql 搭个人博客]]></title>
    <url>%2Fhexo_blog%2F2018%2F10%2F09%2FDjango%2BBootstrap%2BMysql%20%E6%90%AD%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[初始化新建项目12345#pycharm手动创建django项目或如下$ django-admin.py startproject website#创建Django app$ python manage.py startapp blog 更改数据库配置(sqlite-&gt;mysql)1234567891011#/website/setting.pyDATABASES = &#123; 'default': &#123; 'ENGINE': 'django.db.backends.mysql', 'NAME': 'blog', #数据库名字 'USER': 'root', #账号 'PASSWORD': 'tony', #密码 'HOST': '127.0.0.1', #IP 'PORT': '3306', #端口 &#125;&#125; 更改数据库配置还需初始化1234567891011#/website/__init__.pyimport pymysqlpymysql.install_as_MySQLdb() #下面的只是调试db = pymysql.connect("localhost", 'root', 'tony', 'blog')cursor = db.cursor()cursor.execute("select version()") #执行sql语句调试一波data = cursor.fetchone()print(data)db.close() 模型设计一个model也是一个数据库的映射123456789101112131415161718192021222324252627282930313233343536373839404142434445#/blog/models.pyfrom django.db import modelsfrom django.contrib.auth.models import Userclass Category(models.Model): name = models.CharField('分类',max_length=128) def __str__(self): return self.name class Meta: verbose_name = '博客分类' verbose_name_plural = verbose_nameclass Tag(models.Model): name = models.CharField('标签', max_length=128) def __str__(self): return self.name class Meta: verbose_name = '博客标签' verbose_name_plural = verbose_nameclass Entry(models.Model): title = models.CharField('文章标题',max_length=128) author = models.ForeignKey(User,verbose_name='作者',on_delete=models.CASCADE) img = models.ImageField(upload_to='blog_img',null=True,blank=True,verbose_name='博客配图') body = models.TextField('正文',) abstract = models.TextField('摘要',max_length=256,null=True,blank=True) visiting = models.PositiveIntegerField('访问量',default=0) category = models.ManyToManyField('Category',verbose_name='博客分类') tags = models.ManyToManyField('Tag',verbose_name='标签') created_time = models.DateTimeField('创建时间',auto_now_add=True) modifyed_time = models.DateTimeField('修改时间',auto_now=True) def __str__(self): return self.title class Meta: ordering = ['-created_time'] verbose_name = '博客正文' verbose_name_plural = verbose_name admin:后台管理界面, 添加删除网站的内容1234567891011#/blog/admin.pyfrom django.contrib import adminfrom . import modelsclass EntryAdmin(admin.ModelAdmin): list_display = ['title','author','visiting','created_time','modifyed_time']admin.site.register(models.Category)admin.site.register(models.Tag)admin.site.register(models.Entry,EntryAdmin) 创建超级用户$ python manage.py createsuperuser 此时如果出现No such Table ‘auth_user’，说明没有初始化（创建）默认数据库表创建默认库$ python manage.py migrate如果已经运行过上面命令，就$ python manage.py makemigrations url、views12345678#/website/urls.pyfrom django.conf.urls import url,includefrom django.contrib import adminurlpatterns = [ url(r'^admin/', admin.site.urls), url(r'^blog/',include('blog.urls') ),] 12345678910#/blog/urls.pyfrom django.conf.urls import urlfrom . import viewsapp_name = 'blog'urlpatterns = [ url(r'^$', views.index,name='blog_index'), url(r'^(?P&lt;blog_id&gt;[0-9]+)', views.detail,name='blog_detail'),] 1234567891011#/blog/views.pyfrom django.shortcuts import renderdef index(request): return render(request,'blog/index.html',locals())def detail(request,blog_id): return render(request,'blog/detail.html',locals()) 基本前端bootstrap和js都放进/static/12345#/website/setting.py 添加静态文件路径STATIC_URL = '/static/'STATICFILES_DIRS = [ os.path.join(BASE_DIR,'static'),] 123456789101112#/blog/templates/blog/detail.html&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;博客详情&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;博客&#123;&#123; blog_id &#125;&#125;的详情&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#/blog/base.html&#123;% load staticfiles %&#125;&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;&#123;% block title %&#125;&#123;% endblock %&#125;&lt;/title&gt; &lt;link href="&#123;% static 'bootstrap/css/bootstrap.min.css' %&#125;" rel="stylesheet"&gt; &lt;link href="&#123;% static 'blog/css/blog_nav.css' %&#125;" rel="stylesheet"&gt; &#123;% block css %&#125;&#123;% endblock %&#125;&lt;/head&gt;&lt;body&gt;&lt;nav class="navbar navbar-fixed-top"&gt; &lt;div class="container-fluid"&gt; &lt;!-- Brand and toggle get grouped for better mobile display --&gt; &lt;div class="navbar-header"&gt; &lt;button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#my-nav" aria-expanded="false"&gt; &lt;span class="sr-only"&gt;Toggle navigation&lt;/span&gt; &lt;span class="icon-bar"&gt;&lt;/span&gt; &lt;span class="icon-bar"&gt;&lt;/span&gt; &lt;span class="icon-bar"&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class="navbar-brand" href="#"&gt;hhh&lt;/a&gt; &lt;/div&gt; &lt;!-- Collect the nav links, forms, and other content for toggling --&gt; &lt;div class="collapse navbar-collapse" id="my-nav"&gt; &lt;ul class="nav navbar-nav"&gt; &lt;li class="active"&gt;&lt;a href="/blog/"&gt;博客&lt;/a&gt;&lt;/li&gt; &lt;li &gt;&lt;a href="#"&gt;学习资源&lt;/a&gt;&lt;/li&gt; &lt;li &gt;&lt;a href="#"&gt;联系我&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;form class="navbar-form navbar-left"&gt; &lt;div class="form-group"&gt; &lt;input type="text" class="form-control" placeholder="Search"&gt; &lt;/div&gt; &lt;button type="submit" class="btn btn-default"&gt;搜索&lt;/button&gt; &lt;/form&gt; &lt;ul class="nav navbar-nav navbar-right"&gt; &lt;li&gt;&lt;a href="#"&gt;登录&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;!-- /.navbar-collapse --&gt; &lt;/div&gt;&lt;!-- /.container-fluid --&gt;&lt;/nav&gt;&#123;% block content %&#125;&#123;% endblock %&#125; &lt;footer&gt; &lt;div class="footer" role="navigation"&gt; &lt;div class="container"&gt; &lt;div class="navbar-text"&gt; &lt;ul class="footer-text"&gt; &lt;li&gt;&lt;a href="#"&gt;主页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;联系我们&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;关于博主&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;文档支持&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="/blog/"&gt;博客首页&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Copyright © 2018 hh &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/footer&gt;&lt;script src="&#123;% static 'jquery-3.3.1.min.js' %&#125;"&gt;&lt;/script&gt;&lt;script src="&#123;% static 'bootstrap/js/bootstrap.min.js' %&#125;"&gt;&lt;/script&gt;&#123;% block script %&#125;&#123;% endblock %&#125;&lt;/body&gt;&lt;/html&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129#/static/blog/css/blog_nav.cssbody &#123; margin-top: 30px; font-weight: 400; /* Required padding for .navbar-fixed-top. Change if height of navigation changes. */ padding-top: 70px;&#125;/* Navbar and footer (global) styling */.navbar-fixed-top .nav &#123; padding: 15px 0;&#125;.navbar &#123; color: black; border-width: thin; -webkit-transition: .2s; background-color: white; border-bottom: 1px solid #e0e0e0; background-color: white;&#125;.navbar a &#123; color: black;&#125;.navbar-fixed-top .navbar-brand &#123; padding: 0 15px;&#125;.navbar-header .icon-bar &#123; background-color: black;&#125;.navbar-nav &gt; li &gt; .navbar-active &#123; color: #E46E2E;&#125;.navbar-scroll &#123; background-color: white; animation-duration: 2s; animation-name: smooth; -moz-box-shadow: 1px 1px 1px #999; -webkit-box-shadow: 1px 1px 1px #999; box-shadow: 1px 1px 1px #999;&#125;.jupytercon-nav &gt; li &gt; .black-tab &#123; color: black;&#125;.navbar-logo &#123; height: 45px;&#125;.nav &gt; li &gt; a &#123; font-size: 20px; padding: 12px 16px 10px;&#125;.nav &gt; li &gt; a:hover &#123; background-color: transparent; color: #E46E2E; -webkit-transition: .2s;&#125;.nav &gt; li &gt; a:focus &#123; background-color: white;&#125;.nav &gt; li &gt; a:active &#123; background-color: #F8F8F8;&#125;.nav &gt; li &gt; a:visited &#123; background-color: #F8F8F8;&#125;.tab:hover &#123; background-color: transparent; color: #E46E2E;&#125;.footer &#123; background-color: #979797;&#125;.footer p &#123; color: white; padding-top: 10px;&#125;.footer li &#123; color: white; display: inline-block; text-decoration: none;&#125;.footer a &#123; color: white; text-decoration: none;&#125;.footer li::after &#123; content:" |";&#125;.footer li:last-of-type::after &#123; content:"";&#125;.footer-text &#123; font-size: 16px; margin-left: 0; padding-left: 0;&#125;.navbar-brand &#123; float: left; height: 50px; padding: 15px 15px; font-size: 20px; line-height: 20px; margin-top: 27px;&#125;nav .navbar-form&#123; padding: 10px;&#125; 1234567891011#/blog/index.html&#123;% extends 'blog/base.html' %&#125;&#123;% block title %&#125;博客首页&#123;% endblock %&#125;&#123;% block content %&#125; 博客首页 &lt;div style="height: 440px; " &gt;&lt;/div&gt;&#123;% endblock %&#125; 最终目录如下： 前端设计1234#/website/setting.py....MEDIA_ROOT = os.path.join(BASE_DIR,'media').replace("//","/")MEDIA_URL = '/media/' 添加图片的url123456789101112#/website/urls.pyfrom django.conf.urls import url,includefrom django.contrib import adminfrom django.conf import settingsfrom django.conf.urls.static import staticurlpatterns = [ url(r'^admin/', admin.site.urls), url(r'^blog/',include('blog.urls') ),] + static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT ) #添加图片的url 添加两个方法1234567891011#/blog/models.pyclass Entry(models.Model): ... def get_absolute_url(self): #获取当前博客详情页的url return reverse("blog:blog_detail",kwargs=&#123;"blog_id":self.id&#125;) #app名字，详情页url的别名，参数是当前博客的id def increase_visiting(self): #访问量加1 self.visiting += 1 self.save(update_fields=['visiting']) #只保存某个字段 123456789101112131415#/blog/views.pyfrom django.shortcuts import renderfrom . import modelsdef index(request): entries = models.Entry.objects.all() return render(request,'blog/index.html',locals())def detail(request,blog_id): entry = models.Entry.objects.get(id=blog_id) entry.increase_visiting() return render(request,'blog/detail.html',locals()) 1234567891011121314151617181920212223242526272829303132333435#index.html&#123;% extends 'blog/base.html' %&#125;&#123;% block title %&#125;博客首页&#123;% endblock %&#125;&#123;% block content %&#125; &lt;div class="container"&gt; &lt;div class="row"&gt; &lt;div class="col-md-9"&gt; &#123;% for entry in entries %&#125; &lt;h2&gt;&lt;a href="&#123;&#123; entry.get_absolute_url &#125;&#125;"&gt;&#123;&#123; entry.title &#125;&#125;&lt;/a&gt;&lt;/h2&gt; &lt;br&gt; &#123;% if entry.img %&#125; &lt;img src="&#123;&#123; entry.img.url &#125;&#125;" width="60%" height="270px"/&gt; &#123;% endif %&#125; &#123;% if entry.abstract %&#125; &lt;p&gt;&#123;&#123; entry.abstract &#125;&#125;&lt;/p&gt; &#123;% else %&#125; &lt;p&gt;&#123;&#123; entry.body|truncatechars:180 &#125;&#125;&lt;/p&gt; &#123;% endif %&#125; &lt;p&gt; &lt;span&gt;作者：&#123;&#123; entry.author &#125;&#125;&lt;/span&gt; &lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;发布时间：&#123;&#123; entry.created_time &#125;&#125;&lt;/span&gt; &lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;阅读数：&#123;&#123; entry.visiting &#125;&#125;&lt;/span&gt; &lt;/p&gt; &#123;% endfor %&#125; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&#123;% endblock %&#125; 123456789101112131415161718192021222324252627282930313233343536373839#detail.html&#123;% extends 'blog/base.html' %&#125;&#123;% block title %&#125;博客详情页&#123;% endblock %&#125;&#123;% block content %&#125; &lt;div class="container"&gt; &lt;div class="row"&gt; &lt;div class="col-md-9"&gt; &lt;h1&gt;&#123;&#123; entry.title &#125;&#125;&lt;/h1&gt; &lt;p&gt; &lt;strong&gt;&#123;&#123; entry.author &#125;&#125;&lt;/strong&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#123;&#123; entry.created_time|date:'Y年m月d日' &#125;&#125; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;分类： &#123;% for category in entry.category.all %&#125; &amp;nbsp;&amp;nbsp;&lt;a href="#"&gt;&#123;&#123; category.name &#125;&#125;&lt;/a&gt; &#123;% endfor %&#125; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;标签： &#123;% for tag in entry.tags.all %&#125; &amp;nbsp;&amp;nbsp;&lt;a href="#"&gt;&#123;&#123; tag.name &#125;&#125;&lt;/a&gt; &#123;% endfor %&#125; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;浏览量： &amp;nbsp;&amp;nbsp;&#123;&#123; entry.visiting &#125;&#125; &#123;% if entry.img %&#125; &lt;img src="&#123;&#123; entry.img.url &#125;&#125;" width="60%" height="270px"/&gt; &#123;% endif %&#125; &lt;hr /&gt; &lt;p&gt; &#123;&#123; entry.body &#125;&#125; &lt;/p&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&#123;% endblock %&#125; Markdown排版、语法高亮和生成目录123pip install markdownpip install pygmentspygmentize -S default -f html -a .codehilite &gt; code.css #可生成code.css文件，也就是语法高亮的样式，然后把文件放到static里 配置md1234567891011121314151617181920212223# /blog/views.pyimport markdownfrom django.shortcuts import renderfrom . import modelsdef index(request): entries = models.Entry.objects.all() return render(request,'blog/index.html',locals())def detail(request,blog_id): entry = models.Entry.objects.get(id=blog_id) md = markdown.Markdown(extensions=[ 'markdown.extensions.extra', 'markdown.extensions.codehilite', 'markdown.extensions.toc', ]) entry.body = md.convert(entry.body) entry.toc = md.toc entry.increase_visiting() return render(request, 'blog/detail.html', locals()) 导入css123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#base.html&#123;% load staticfiles %&#125;&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;&#123;% block title %&#125;&#123;% endblock %&#125;&lt;/title&gt; &lt;link href="&#123;% static 'bootstrap/css/bootstrap.min.css' %&#125;" rel="stylesheet"&gt; &lt;link href="&#123;% static 'blog/css/blog_nav.css' %&#125;" rel="stylesheet"&gt; &lt;link rel="stylesheet" href="&#123;% static 'blog/css/code.css' %&#125;"&gt; #这里引入css&lt;/head&gt;&lt;body&gt;&lt;nav class="navbar navbar-fixed-top"&gt; &lt;div class="container-fluid"&gt; &lt;!-- Brand and toggle get grouped for better mobile display --&gt; &lt;div class="navbar-header"&gt; &lt;button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#my-nav" aria-expanded="false"&gt; &lt;span class="sr-only"&gt;Toggle navigation&lt;/span&gt; &lt;span class="icon-bar"&gt;&lt;/span&gt; &lt;span class="icon-bar"&gt;&lt;/span&gt; &lt;span class="icon-bar"&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class="navbar-brand" href="#"&gt;hhh&lt;/a&gt; &lt;/div&gt; &lt;!-- Collect the nav links, forms, and other content for toggling --&gt; &lt;div class="collapse navbar-collapse" id="my-nav"&gt; &lt;ul class="nav navbar-nav"&gt; &lt;li class="active"&gt;&lt;a href="/blog/"&gt;博客&lt;/a&gt;&lt;/li&gt; &lt;li &gt;&lt;a href="#"&gt;学习资源&lt;/a&gt;&lt;/li&gt; &lt;li &gt;&lt;a href="#"&gt;联系我&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;form class="navbar-form navbar-left"&gt; &lt;div class="form-group"&gt; &lt;input type="text" class="form-control" placeholder="Search"&gt; &lt;/div&gt; &lt;button type="submit" class="btn btn-default"&gt;搜索&lt;/button&gt; &lt;/form&gt; &lt;ul class="nav navbar-nav navbar-right"&gt; &lt;li&gt;&lt;a href="#"&gt;登录&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;!-- /.navbar-collapse --&gt; &lt;/div&gt;&lt;!-- /.container-fluid --&gt;&lt;/nav&gt;&#123;% block content %&#125;&#123;% endblock %&#125; &lt;footer&gt; &lt;div class="footer" role="navigation"&gt; &lt;div class="container"&gt; &lt;div class="navbar-text"&gt; &lt;ul class="footer-text"&gt; &lt;li&gt;&lt;a href="#"&gt;主页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;联系我们&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;关于博主&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;文档支持&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="/blog/"&gt;博客首页&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Copyright © 2018 hh &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/footer&gt;&lt;script src="&#123;% static 'jquery-3.3.1.min.js' %&#125;"&gt;&lt;/script&gt;&lt;script src="&#123;% static 'bootstrap/js/bootstrap.min.js' %&#125;"&gt;&lt;/script&gt;&#123;% block script %&#125;&#123;% endblock %&#125;&lt;/body&gt;&lt;/html&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142#detail.html&#123;% extends 'blog/base.html' %&#125;&#123;% load staticfiles %&#125;&#123;% block title %&#125;博客详情页&#123;% endblock %&#125;&#123;% block content %&#125; &lt;div class="container"&gt; &lt;div class="row"&gt; &lt;div class="col-md-9"&gt; &lt;h1&gt;&#123;&#123; entry.title &#125;&#125;&lt;/h1&gt; &lt;p&gt; &lt;strong&gt;&#123;&#123; entry.author &#125;&#125;&lt;/strong&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#123;&#123; entry.created_time|date:'Y年m月d日' &#125;&#125; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;分类： &#123;% for category in entry.category.all %&#125; &amp;nbsp;&amp;nbsp;&lt;a href="#"&gt;&#123;&#123; category.name &#125;&#125;&lt;/a&gt; &#123;% endfor %&#125; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;标签： &#123;% for tag in entry.tags.all %&#125; &amp;nbsp;&amp;nbsp;&lt;a href="#"&gt;&#123;&#123; tag.name &#125;&#125;&lt;/a&gt; &#123;% endfor %&#125; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;浏览量： &amp;nbsp;&amp;nbsp;&#123;&#123; entry.visiting &#125;&#125; &#123;% if entry.img %&#125; &lt;img src="&#123;&#123; entry.img.url &#125;&#125;" width="10%" height="10%"/&gt; &#123;% endif %&#125; &lt;hr /&gt; &lt;p&gt; &#123;&#123; entry.toc|safe &#125;&#125; #给加上safe过滤器，表示不需要转义，直接显示原始内容 &#123;&#123; entry.body|safe &#125;&#125; #一样 &lt;/p&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&#123;% endblock %&#125; 然后在blog查看效果 暂时先搁置，发现还有挺多没学到的东西。。 参考： http://wiki.jikexueyuan.com/project/django-set-up-blog/models.htmlhttps://www.cnblogs.com/derek1184405959/p/9060981.html]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python Network Programming]]></title>
    <url>%2Fhexo_blog%2F2018%2F10%2F09%2FPython%20Network%20Programming%2F</url>
    <content type="text"><![CDATA[socketsocket.gethostbyname(hostname) socket.gethostbyaddr(addr) socket.getservbyname(name) 查询端口号(如name=’www’, 返回80) socket.getserbyport(80) 返回’www’ 127... 是本地ip10... 172.16-31.. 192.168.. 为私有子网所预留。 子网掩码255.255.255.0 可以表述为.../24 （***=11111111，8位） tcpsock = socket.socket(xxx…) (参数参考https://www.cnblogs.com/wumingxiaoyao/p/7047658.html)（ 一般要写SO_REUSERADDR以防同一端口最近关闭的连接还未关闭导致错误，因为关闭后会有CLOSE-WAIT和TIME-WAIT 状态） sock.accept() 会创建一个连接套接字 （对应客户端发送的sock.connect()） sock.listen() 会创建一个监听套接字 sock.sendall() 实现了完整数据块传输，recvall需要自己写 sock.getsockname() sock.bind(interface,port) interface取””空字符串表示接受任意网络接口的请求（0.0.0.0表示接受任意，py简化了） sock.shutdown(xxx) 半开连接的操作 sock.makefile() 直接进行文件读写 tcp客户端服务端1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#!/usr/bin/env python3import argparse, socketdef recvall(sock, length): data = b'' while len(data) &lt; length: more = sock.recv(length - len(data)) if not more: raise EOFError('was expecting %d bytes but only received' ' %d bytes before the socket closed' % (length, len(data))) data += more return datadef server(interface, port): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) sock.bind((interface, port)) sock.listen(1) print('Listening at', sock.getsockname()) while True: print('Waiting to accept a new connection') sc, sockname = sock.accept() print('We have accepted a connection from', sockname) print(' Socket name:', sc.getsockname()) print(' Socket peer:', sc.getpeername()) message = recvall(sc, 16) print(' Incoming sixteen-octet message:', repr(message)) sc.sendall(b'Farewell, client') sc.close() print(' Reply sent, socket closed')def client(host, port): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((host, port)) print('Client has been assigned socket name', sock.getsockname()) sock.sendall(b'Hi there, server') reply = recvall(sock, 16) print('The server said', repr(reply)) sock.close()if __name__ == '__main__': choices = &#123;'client': client, 'server': server&#125; parser = argparse.ArgumentParser(description='Send and receive over TCP') parser.add_argument('role', choices=choices, help='which role to play') parser.add_argument('host', help='interface the server listens at;' ' host the client sends to') parser.add_argument('-p', metavar='PORT', type=int, default=1060, help='TCP port (default 1060)') args = parser.parse_args() function = choices[args.role] function(args.host, args.p) #DNS ###socket.getaddrinfosocket.getaddrinfo(host, port[, family[, socktype[, proto[, flags]]]]) 可解析得到IPv6地址。 返回创建一个套接字并发起连接所需的所有信息，返回的元组(family, socktype, proto, canonname, sockaddr)依次为：地址族、类型、协议代号、规范名、地址信息。用前三项作为socket构造参数，第五项为传入地址，可构造出一个连接connect()flag：AI_V4MAPPED:返回IPv4映射到IPv6格式的IPv6地址.(http://www.ip2location.com/articles/ip2location-ipv4-mapped-ipv6-address) bind：为服务器绑定端口。 将host取None，返回合适的通配符地址，可用于bind。 connect/sendto:连接。设置AI_ADDRCONFIG标记，讲所有无法连接的地址过滤掉。使用getaddrinfo1234567891011121314151617181920212223242526272829303132#!/usr/bin/env python3# Foundations of Python Network Programming, Third Edition# https://github.com/brandon-rhodes/fopnp/blob/m/py3/chapter04/www_ping.py# Find the WWW service of an arbitrary host using getaddrinfo().import argparse, socket, sysdef connect_to(hostname_or_ip): try: infolist = socket.getaddrinfo( hostname_or_ip, 'www', 0, socket.SOCK_STREAM, 0, socket.AI_ADDRCONFIG | socket.AI_V4MAPPED | socket.AI_CANONNAME, ) except socket.gaierror as e: print('Name service failure:', e.args[1]) sys.exit(1) info = infolist[0] # per standard recommendation, try the first one socket_args = info[0:3] address = info[4] s = socket.socket(*socket_args) try: s.connect(address) except socket.error as e: print('Network failure:', e.args[1]) else: print('Success: host', info[3], 'is listening on port 80')if __name__ == '__main__': parser = argparse.ArgumentParser(description='Try connecting to port 80') parser.add_argument('hostname', help='hostname that you want to contact') connect_to(parser.parse_args().hostname) dns.resolver() 可进行DNS查询(https://github.com/brandon-rhodes/fopnp/blob/m/py3/chapter04/dns_mx.py)]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
</search>
